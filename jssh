#! /usr/bin/python
import sys, subprocess, os

try:
	import sqlite3
except ImportError:
	print "You need the sqlite3 Python module to run jssh"
	sys.exit(1)
	
try:
	import optparse
except ImportError:
	print "You need the optparse Python module to run jssh"
	sys.exit(1)

class Init():
	def __init__(self):
		if not os.path.exists(os.getenv("HOME") + "/.jssh"):
			os.makedirs(os.getenv("HOME") + "/.jssh")
		self.dbPath = os.getenv("HOME") + "/.jssh/jssh.db"

	def checkFor(self, program):
		def is_exe(fpath):
			return os.path.isfile(fpath) and os.access(fpath, os.X_OK)
		
		fpath, fname = os.path.split(program)
		if fpath:
			if is_exe(program):
				return True
		else: 
			for path in os.environ["PATH"].split(os.pathsep):
				exe_file = os.path.join(path, program)
				if is_exe(exe_file):
					return True
		return None
		

class Database(object):
	def __init__(self):
		self.dbConnection = sqlite3.connect(Init.dbPath)
		self.dbCursor = self.dbConnection.cursor()
		self.dbCursor.execute('create table if not exists servers (nickname text, hostname text, port int, user text, password text)')
		self.dbConnection.commit()
	
	def Add(self, nickname, hostname, port, user, password):
		self.dbCursor.execute("insert into servers values (?, ?, ?, ?, ?)", (nickname, hostname, port, user, password))
		self.dbConnection.commit()
		if not Init.checkFor("plink"):
			print "Plink is not installed, this means auto-login can only happen using SSH keys."
			if(raw_input("Would you like to copy your key to %s? (y/n)" % hostname).lower() == "y"):
				subprocess.call("ssh-copy-id '-p %i %s@%s'" % (port, user, hostname), shell=True)
			else:
				print "Key wil not be copied. Password will be needed when connecting."		
	def Remove(self, hostname):
		self.dbCursor.execute("delete from servers where hostname = '%s' " % hostname)
		self.dbConnection.commit()
	
	def Search(self, string):
		if "." in string:
			hostname = string
			self.dbCursor.execute("select * from servers where hostname = '%s'" % hostname)
			dbResults = self.dbCursor.fetchall()
			return dbResults
		else:
			nick = string
			self.dbCursor.execute("select * from servers where nickname = '%s'" % nick)
			dbResults = self.dbCursor.fetchall()
			return dbResults

	def List(self):
		self.dbCursor.execute("select * from servers")
		dbResults = self.dbCursor.fetchall()
		return dbResults
			
class Ssh(object):
	def __init__(self):
		self.Port = 22
	
	def Connect(self, hostname, port, user, password):
		if Init.checkFor("plink"):
			print "Plink is installed, lets use it"
			Connection = subprocess.call("plink -pw %s -P %i %s@%s" % (password, port, user, hostname), shell=True)
		elif (Init.checkFor("ssh")):
			Connection = subprocess.call("ssh -p %i %s@%s" % (port, user, hostname), shell=True)
		else:
			print "Are you sure you have a supported SSH client installed?" 
		sys.exit()
		

if __name__ == "__main__":
		Init = Init()
		Database = Database()
		Ssh = Ssh()
		parser = optparse.OptionParser()
		parser.add_option('-a', '--add-server', help="Add server to database", default=False, action="store", nargs=2)
		parser.add_option('-r', '--remove-server', help="Remove server from database", default=False, action="store", nargs=1)
		parser.add_option('-s', '--search', help="Search for a server in databse", default=False, action="store", nargs=1)
		parser.add_option('-m', '--manual', help="Manually supply connection information (like a standard ssh client)", default=False, action="store", nargs=2)
		parser.add_option('-p', '--port', help="Force connection on a different port", default=False, nargs=1)
		parser.add_option('-n', '--nick-name', help="Assign a nickname to a server for quickly connecting.", default=False, nargs=2)
		parser.add_option('-l', '--list-servers', help="List servers in database.", default=False, action='store_true')
		parser.add_option('-v', '--verbose', help="Show more information. Used in conjuction with --list-servers", default=False, action='store_true')

				
		(opts, args) = parser.parse_args()
		
		if opts.port:
			Ssh.Port = int(opts.port)
		
		if opts.search:
			searchString = opts.search
			print "Displaying best match for '%s'" % searchString
			try:
				bestMatch = Database.Search(searchString)[0]
			except:
				print "No Matches found!"
			else:
				print "Nick: %s \nHost: %s \nUser: %s \nPass: %s \nPort: %i" % (bestMatch[0], bestMatch[1], bestMatch[3], bestMatch[4], bestMatch[2])
				sys.exit()
			
		if opts.remove_server:
			removeServer = opts.remove_server
			print "Removing '%s' from database" % removeServer
			Database.Remove(removeServer)
			sys.exit()
		
		if opts.manual:
			try:
				user = opts.manual[0].split("@")[0]
				host = opts.manual[0].split("@")[1]
				password = opts.manual[1]
				print "User: %s    Host: %s    Pass: %s" % (user, host, password)
			except:
				print "Usage: jssh -m user@hostname password"
				sys.exit()
			Ssh.Connect(host, Ssh.Port, user, password)
					
		if opts.add_server:
			try:
				addNick = opts.add_server[0].split("@")[1].split(".")[0]
				addServer = opts.add_server[0].split("@")[1]
				addUser = opts.add_server[0].split("@")[0]
				addPassword = opts.add_server[1]
				addPort = Ssh.Port
				print "Nickname: %s\nHostname: %s \nPort: %i \nUser: %s\nPass: %s\nAdded to Database!" % (addNick, addServer, addPort, addUser, addPassword)
				Database.Add(addNick, addServer, addPort, addUser, addPassword)
			except:
				print "Error parsing connection information"

				sys.exit()

		if opts.list_servers:
			allServers = Database.List()
			if not opts.verbose:
				for server in allServers:
					print server[1]		
			if opts.verbose:
				print "Nick		Host			Port		User		Pass"
				print "----		----			----		---		----"
				for server in allServers:
					print "%s		%s		%i		%s		%s" % (server[0], server[1], server[2], server[3], server[4])
					
		if args:
			searchString = args[0]
			try:
				result = Database.Search(searchString)[0]
			except:
				print "No servers found matching '%s'" % searchString
				sys.exit()
			else:
				Ssh.Connect(result[1], result[2], result[3], result[4])

